
--source include/have_debug.inc

--disable_query_log

--disable_warnings
drop table if exists test.pfs_published_schema;
drop table if exists test.pfs_check_table;
drop procedure if exists test.pfs_check_proc;
--enable_warnings

--echo "Checking the data dictionary properties ..."

SET SESSION debug= '+d,skip_dd_table_access_check';
SELECT SUBSTRING_INDEX(SUBSTRING(properties, LOCATE('PS_VERSION', properties), 30), ';', 1)
  FROM mysql.dd_properties;
SET SESSION debug= '-d,skip_dd_table_access_check';

SET @old_group_concat_max_len = @@group_concat_max_len;

# We need 1700 rows of varchar(64) concatenated
SET group_concat_max_len = 200000;

create table test.pfs_published_schema
  (version varchar(20), signature varchar(64), primary key (version));

#
# MAINTAINER:
#
# ONCE A RELEASE IS PUBLISHED,
# DO NOT EVER CHANGE THE SIGNATURES HERE.
#
# The whole point of this MTR test script is that
# it will fail if any change to the performance schema
# database structure is detected, acting as a fail safe.
#
# If a change was intended, then:
# - (a) Go in storage/perfschema/pfs_dd_version.h
# and create a new version number for this release
# - (b) Add a row in table test.pfs_published_schema
# for the new schema published, using the signature
# of the new schema.
#
# (a) will ensure that upgrades from old releases
# will notice the schema change, and upgrade
# the performance_schema structure in the data dictionary accordingly.
# (b) will ensure this test pass again without the SIGNAL complaining.
#
# BEWARE, failure to do (a) when doing (b) alone
# **WILL** result in broken upgrades,
# with a server binary using a new table definition
# in the code and an old, different, table definition
# in the data dictionary found on disk.
#
# This test is designed to be a reminder to do (a)
# by detecting differences in (b)
#
# If you fail to properly update PFS_DD_VERSION,
# git blame will find you.
#

# Keeping track of all signatures published in GA ...

insert into test.pfs_published_schema
 values("MySQL 8.0.17",
        "77d9067b741f0232e413d38f678c9bcd5195a9ee312cb717719bb54f51a79c5f");

insert into test.pfs_published_schema
 values("MySQL 8.0.172",
        "4b2535cee3a558d09b93caaa1fe9021da9e758ffcacd0922bea81ae9799175dc");

insert into test.pfs_published_schema
 values("MySQL 8.0.18",
        "1d6747d842bb2483c860cd7b28e886bdc6111ff61fd6b4d07e367aa7b3e9d9bf");

insert into test.pfs_published_schema
 values("MySQL 8.0.19",
        "f58dba20c4234c34cedfcacd3b9a295dcac77a09b79d5f41d5f740878f272d4d");

insert into test.pfs_published_schema
 values("MySQL 8.0.20",
        "a9aa0ab4a94ca91622145d735e60bbb03577616970351032d3194d8bfd7a69c7");

insert into test.pfs_published_schema
 values("MySQL 8.0.21",
        "112972e1f7d2b3a351a14979ecc3b419efc81e79dc029078a3a94955be218e5a");

insert into test.pfs_published_schema
 values("MySQL 8.0.22",
        "b9000c4a106a8351d2274028965f19d7902c3ccb9faa9407603c9258812f77fe");

insert into test.pfs_published_schema
 values("MySQL 8.0.23",
        "903e1e93e60651094708033160338ba66b6e59a733111e773cac126adc932488");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-001",
        "e3ae72429d83541034c22fe53ee372d0c92c9da7a069d7e7ba38a984a47b8a25");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-002",
        "228c5a5150f9cf92dee198f6a8e3e451cbbc55f87c9e6a4cb8e2424d901e0e32");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-003",
        "1700269e09b7e843953256d2056fafc9fc847c1a87947ff9f5573ef8d62f76ea");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-004",
        "7f330c63735e8f1ac1cba5c20efcc25487afc3e7f1462a09a582cd4eec0c3591");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-005",
        "9f0bf842748ddf4e5faa1a6ee83062ab0c51914c89a29b35db5bb057ea88bc25");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-006",
        "5af2bf101c558c8a6de51d7ffc16490c24514900e3b5cae454cc884f50b27bc1");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-007",
        "e335a4df4ac728dab78b8df5b1c0b9fdb8ff6377db829e7f888db3abf3ea351c");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-008",
        "ea6e306e304340df56286f81a9acf5785a351c5f967067bd7dbf2b0d64fa4ec8");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-009",
        "0d8bb08a6dfb5a8a7e17eb85699f4ef021ebc21440ff54e84584d71f07d0a48e");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-010",
        "37c657b3473424e1e5bb1dbc12fc9db761c76451a0ece92baa3de0ac51a0d154");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-011",
        "29bc9aecda145b77a9f04afcfc54c33e7705fd3b3684fc9651c510d7cdacffd7");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-012",
        "5f4f5b53882436263202e934e191849f0711d0cdbecdee3e3e5e84b5fdec7b56");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-013",
        "0b33fa706b17e5ba4e79d2e2c6602b77a022cfbe405d6ccecff7adb75b040469");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-014",
        "62b05d3ddec5fe0da5f8dfa8cd0ed6423be3829c3d11ef53fc796dd7b198b6ae");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-015",
        "f48c85de189517bd46a10dabd7c23fab4890c2ff3ad53011e6d0799b8ddfc5ca");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-016",
        "d48bcfd092c06f69d9de13b8ec81af09b1a7b30000a003f8a71c00a89508ca25");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-017",
        "a2bef8136b09e7fe66cff3c88657696e19be85f57b9a8b7e04c2cb12a4a4a99e");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-018",
        "28050dafea478e5ed5fa80e536caca5456259d4ff6dfcd952943d164c014f695");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-019",
        "de147f6e52b8a510b1e2e9373690e0b8e09c4dc1c2a47bd74e2140112beaaab0");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-020",
        "012dd39f1973ea3f022a2a06b8561ac31ab43b3e3e08905bfe7a6b480ec1c9cf");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-021",
        "078e1387dd6a858be342983d5347a8c0c76528e37c313bcaad86b31a572fc6ab");

insert into test.pfs_published_schema
 values("MySQL 8.0.23-022",
        "4ce3841b7929f0dc92e9a37bc6fe41d8190f3ca9cf59b6fe3eed4d81d7084e0c");

create table test.pfs_check_table
  (id int NOT NULL AUTO_INCREMENT,
   t text NOT NULL,
   row_hash varchar(64) default null,
   PRIMARY KEY (id));

delimiter $$;

create procedure test.pfs_check_proc()
begin
  declare whole_schema longtext;
  declare max_length int;
  declare found_signature varchar(64);
  declare found_version varchar(20);

  insert into test.pfs_check_table(t)
    select concat(CATALOG_NAME, "-",
                  SCHEMA_NAME, "-",
                  DEFAULT_CHARACTER_SET_NAME, "-",
                  DEFAULT_COLLATION_NAME, "-",
                  ifnull(SQL_PATH, "NULL"))
    from INFORMATION_SCHEMA.SCHEMATA
    where SCHEMA_NAME = "performance_schema";

  insert into test.pfs_check_table(t)
    select concat(TABLE_CATALOG, "-",
                  TABLE_SCHEMA, "-",
                  TABLE_NAME, "-",
                  TABLE_TYPE, "-",
                  ENGINE, "-",
                  VERSION, "-",
                  ROW_FORMAT, "-",
                  ifnull(AUTO_INCREMENT, "no_auto_increment"), "-",
                  ifnull(TABLE_COLLATION, "no_collation"), "-",
                  ifnull(CREATE_OPTIONS, "no_create_options"), "-",
                  ifnull(TABLE_COMMENT, "no_table_comments"))
    from INFORMATION_SCHEMA.TABLES
    where TABLE_SCHEMA = "performance_schema"
    order by TABLE_NAME;

  insert into test.pfs_check_table(t)
    select concat(TABLE_CATALOG, "-",
                  TABLE_SCHEMA, "-",
                  TABLE_NAME, "-",
                  COLUMN_NAME, "-",
                  ORDINAL_POSITION, "-",
                  ifnull(COLUMN_DEFAULT, "no_default"), "-",
                  IS_NULLABLE, "-",
                  COLUMN_TYPE, "-",
                  ifnull(CHARACTER_SET_NAME, "no_charset"), "-",
                  ifnull(COLLATION_NAME, "no_collation"), "-",
                  ifnull(COLUMN_COMMENT, "no_comment"))
    from INFORMATION_SCHEMA.COLUMNS
    where TABLE_SCHEMA = "performance_schema"
    order by TABLE_NAME, ORDINAL_POSITION;

  insert into test.pfs_check_table(t)
    select concat(TABLE_CATALOG, "-",
                  TABLE_SCHEMA, "-",
                  TABLE_NAME, "-",
                  NON_UNIQUE, "-",
                  INDEX_SCHEMA, "-",
                  INDEX_NAME, "-",
                  SEQ_IN_INDEX, "-",
                  COLUMN_NAME, "-",
                  NULLABLE, "-",
                  INDEX_TYPE, "-",
                  COMMENT)
    from INFORMATION_SCHEMA.STATISTICS
    where TABLE_SCHEMA = "performance_schema"
    order by TABLE_NAME, INDEX_NAME, SEQ_IN_INDEX;

/*
  There is a lot of data to crunch,
  doing an intermediate checksum by row.
*/

  update test.pfs_check_table
    set row_hash = sha2(t, 256);

/*
  And then doing a checksum of all rows.
*/

  select group_concat(row_hash order by id)
    from test.pfs_check_table
    into whole_schema;

  select length(whole_schema) into max_length;

  if (max_length = @@group_concat_max_len)
  then
    signal sqlstate "50000" set message_text = "Failed to check, whole_schema string truncated";
  end if;

  select SHA2(whole_schema, 256) into found_signature;

  select version into found_version from test.pfs_published_schema
    where signature = found_signature;

  if found_version is null
  then
    begin
      /* Limitation on SIGNAL */
      declare full_msg text;

      /*
        Booby trap: some people do not analyze test failures and
        blindly mtr --record a test to make it 'pass'.
        Make sure, by using now(), that this will not happen.
        See the comments in the MAINTAINER section of this test.
      */
      select concat("Unknown signature ",
                    found_signature,
                    ", fix PFS_DD_VERSION now (",
                    now(),
                    ")") into full_msg;

      signal sqlstate "50000" set message_text = full_msg;
    end;
  end if;

  select concat("The tables in the performance_schema were last changed in ",
                found_version) as "CHECK STATUS";

end
$$

delimiter ;$$

--echo "Checking the performance schema database structure ..."

call test.pfs_check_proc();

# Debug
# select count(*) from test.pfs_check_table;

SET group_concat_max_len = @old_group_concat_max_len;

drop table test.pfs_published_schema;
drop table test.pfs_check_table;
drop procedure test.pfs_check_proc;

--enable_query_log
